#!/bin/bash

# Calculate pi

#  -----------
# | Delimiter |
#  -----------
delimiter="------------------------------------------------------------------------------------------------------------"

#  ---------
# | Sources |
#  ---------
source assets/getInfo.sh
source assets/formatTime.sh
source assets/defaultDir.sh
source assets/backupResults.sh
source assets/showProgress.sh

checkDependencies() {
	# Check if all dependencies for the benchmark are installed
	if ! which python 2>/dev/null 1>&2; then missing+=("python"); fi
	if ! which bc 2>/dev/null 1>&2; then missing+=("bc"); fi
}

selectBenchmark() {
	# Select nth number of Fibonacci sequence
	PS3="[+] Select benchmark: "
	benchmarks=("100K" "256K" "512K" "1M" "2M" "4M" "8M" "16M" "32M")
	select benchmark in "${benchmarks[@]}"; do
		case "${benchmark}" in
			"100K")
				printf "${benchmark} 100000\n"
				break
				;;
			"256K")
				printf "${benchmark} 256000\n"
				break
				;;
			"512K")
				printf "${benchmark} 512000\n"
				break
				;;
			"1M")
				printf "${benchmark} 1000000\n"
				break
				;;
			"2M")
				printf "${benchmark} 2000000\n"
				break
				;;
			"4M")
				printf "${benchmark} 4000000\n"
				break
				;;
			"8M")
				printf "${benchmark} 8000000\n"
				break
				;;
			"16M")
				printf "${benchmark} 16000000\n"
				break
				;;
			"32M")
				printf "${benchmark} 32000000\n"
				break
				;;
		esac
	done
}

benchmark() {
	# Run benchmark

	# Select benchmark
	data="$(selectBenchmark)"

	# Parse data
	IFS=' ' read -ra ADDR <<< "${data}"
	bench="${ADDR[0]}"
	data="${ADDR[1]}"

	# Print selected benchmark
	printf "%s\n" "${delimiter}"
	printf "| [+] Selected benchmark: %s\n" "${bench}"
	printf "%s\n" "${delimiter}"

	# Write selected benchmark to a file
	{
		printf "%s\n" "${delimiter}"
		printf "| [+] Selected benchmark: %s\n" "${bench}"
		printf "%s\n" "${delimiter}"
	} >> "${result_file}"

	# Download benchmark script to ${defaultDir}/data/, if it does not exist
	if ! [[ -f "$(pwd)/data/power.py" ]]; then
		curl -s "https://raw.githubusercontent.com/KostasEreksonas/benchmarking-linux/refs/heads/main/benchmarks/data/power/power.py" > "power.py"
		chmod +x "power.py"
		mv "power.py" "data/"
	fi

	# Initialize variables for fastest and average times
	fastest=0
	average=0

	for (( i=0; i<"${iterations}"; i++ )); do
		# Print iteration number
		printf "%s\n" "${delimiter}"
		printf "| [+] Iteration: %s\n" "$((i + 1))"

		# Start benchmark
		start_time="$(date +%s.%3N)"
		python3 data/power.py "${data}"
		end_time="$(date +%s.%3N)"

		# Get time of current iteration
		total="$(echo "${end_time}-${start_time}" | bc -l 2> /dev/null)"

		# Update fastest time
		if [ "$(echo "${total} < ${fastest}" | bc -l 2> /dev/null)" -eq 1 ] || [ "$(echo "${fastest} == 0" | bc -l 2> /dev/null)" -eq 1 ]; then
			fastest="${total}"
		fi

		# Add to average time (after all iterations divide from iteration count)
		average="$(echo "${average} + ${total}" | bc -l 2> /dev/null)"

		# Print iteration time
		printf "| [+] Iteration %s time: %s\n" "$((i + 1))" "$(formatTime "${total}")"
		printf "%s\n" "${delimiter}"

		# Write iteration data to file
		{
			printf "%s\n" "${delimiter}"
			printf "| [+] Iteration: %s\n" "$((i + 1))"
			printf "| [+] Iteration %s time: %s\n" "$((i + 1))" "$(formatTime "${total}")"
			printf "%s\n" "${delimiter}"
		} >> "${result_file}"

		# Reset total
		total=0
	done

	# Print results
	printf "%s\n" "${delimiter}"
	printf "| [+] Fastest time: %.3f s\n" "$(echo "${fastest}" | bc -l 2> /dev/null)"
	printf "| [+] Average time: %.3f s\n" "$(echo "${average} / ${iterations}" | bc -l 2> /dev/null)"
	printf "%s\n" "${delimiter}"

	# write results to a file
	{
		printf "%s\n" "${delimiter}"
		printf "| [+] Fastest time: %.3f s\n" "$(echo "${fastest}" | bc -l 2> /dev/null)"
		printf "| [+] Average time: %.3f s\n" "$(echo "${average} / ${iterations}" | bc -l 2> /dev/null)"
		printf "%s\n" "${delimiter}"
	} >> "${result_file}"
}

#  ------
# | Main |
#  ------

# Array to store missing dependencies
missing=()

# Check dependencies
checkDependencies

if [[ -z "${missing[*]}" ]]; then
	# Default directory
	default_directory="${HOME}/Documents/benchmarks/benchmark-power"

	# Results file
	result_file="results.txt"

	# Create default dir
	defaultDir

	# Backup results file
	backupResults

	# Number of iterations
	iterations=5

	# Print start date for a benchmark
	printf "%s\n" "${delimiter}"
	printf "| [+] Benchmark started at %s\n" "$(date +%Y-%m-%d_%H-%M-%S)"
	printf "%s\n" "${delimiter}"

	# Write a start date to file
	{
		printf "%s\n" ${delimiter};
		printf "| [+] Benchmark started at %s\n" "$(date +%Y-%m-%d_%H-%M-%S)";
		printf "%s\n" ${delimiter};
	} >> "${result_file}"

	# Print iteration count
	printf "%s\n" "${delimiter}";
	printf "| [+] Iterations: %s\n" "${iterations}";
	printf "%s\n" "${delimiter}";

	# Write iterations to file
	{
		printf "%s\n" "${delimiter}";
		printf "| [+] Iterations: %s\n" "${iterations}";
		printf "%s\n" "${delimiter}";
	} >> "${result_file}"

	# Print system info
	getInfo

	# Run benchmark
	benchmark

	# Print end date for a benchmark
	printf "%s\n" "${delimiter}"
	printf "| [+] Benchmark ended at %s\n" "$(date +%Y-%m-%d_%H-%M-%S)"
	printf "%s\n" "${delimiter}"

	# Write end date to a file
	{
		printf "%s\n" "${delimiter}";
		printf "| [+] Benchmark ended at %s\n" "$(date +%Y-%m-%d_%H-%M-%S)";
		printf "%s\n" "${delimiter}";
		printf "\r\n";
	} >> "${result_file}"
else
	printf "%s\n" "${delimiter}";
	printf "| [+] Missing dependencies: ${missing[*]} | OS: %s | Consult distribution docs on how to install required dependencies and try again\n" "$(grep -w ID /etc/os-release | cut -d "=" -f 2)"
	printf "%s\n" "${delimiter}";
fi
