#!/bin/bash

#  -----------
# | Delimiter |
#  -----------
delimiter="------------------------------------------------------------------------------------------------------------"

#  ---------
# | Sources |
#  ---------
source assets/getInfo.sh
source assets/defaultDir.sh
source assets/backupResults.sh
source assets/showProgress.sh

#  -----------
# | Functions |
#  -----------
checkDependencies() {
	# Check if all dependencies for the benchmark are installed
	if ! which openssl 2>/dev/null 1>&2; then missing+=("openssl"); fi
}

chooseAlgorithm() {
	# Choose algorithm to benchmark
	PS3="[+] Choose algorithm: "
	algorithms=("md5" "sha1" "sha256" "sha512" "des" "des-ede3" "aes-128-cbc" "aes-192-cbc" "aes-256-cbc" "rsa2048" "dsa2048" "chacha20-poly1305")
	select algorithm in "${algorithms[@]}"; do
		case "${algorithm}" in
			"md5")
				printf "%s\n" "${algorithm}"
				break
				;;
			"sha1")
				printf "%s\n" "${algorithm}"
				break
				;;
			"sha256")
				printf "%s\n" "${algorithm}"
				break
				;;
			"sha512")
				printf "%s\n" "${algorithm}"
				break
				;;
			"des")
				printf "%s\n" "${algorithm}"
				break
				;;
			"des-ede3")
				printf "%s\n" "${algorithm}"
				break
				;;
			"aes-128-cbc")
				printf "%s\n" "${algorithm}"
				break
				;;
			"aes-192-cbc")
				printf "%s\n" "${algorithm}"
				break
				;;
			"aes-256-cbc")
				printf "%s\n" "${algorithm}"
				break
				;;
			"rsa2048")
				printf "%s\n" "${algorithm}"
				break
				;;
			"dsa2048")
				printf "%s\n" "${algorithm}"
				break
				;;
			"chacha20-poly1305")
				printf "%s\n" "${algorithm}"
				break
				;;
		esac
	done
}

benchmark() {
	# Run benchmark

	# Select algorithm
	algo="$(chooseAlgorithm)"

	printf "%s\n" "${delimiter}"
	printf "[+] Algorithm: %s\n" "${algo}"
	printf "%s\n" "${delimiter}"

	{
		printf "%s\n" "${delimiter}"
		printf "[+] Algorithm: %s\n" "${algo}"
		printf "%s\n" "${delimiter}"
	} >> "${result_file}"

	# Initialize fastest scores
	fastest_16=0
	fastest_64=0
	fastest_256=0
	fastest_1024=0
	fastest_8192=0
	fastest_16384=0

	for (( i=0; i<"${iterations}"; i++ )); do

		# Print iteration
		printf "%s\n" "${delimiter}"
		printf "Iteration: %s\n" "$((i+1))"
		printf "%s\n" "${delimiter}"

		# Write iteration number to a result file
		{
			printf "%s\n" "${delimiter}"
			printf "Iteration: %s\n" "$((i+1))"
			printf "%s\n" "${delimiter}"
		} >> "${result_file}"

		# Open FD3
		tmp_file="/tmp/bench_data"
		exec 3<> "${tmp_file}"

		# Main command
		nohup 1>/dev/null openssl speed "${algo}" 2>&3 &

		# Get pid of the backgrounded benchmark process
		pid="${!}"

		# If the script is killed, kill benchmark also
		trap 'kill ${pid} 2>/dev/null' EXIT

		# Initial line count for a temporary file
		tmp="$(cat ${tmp_file} | wc -l)"

		# Print benchmark progress
		# Multiple tests are run, when one finishes - print result on the same line and move next test to a new line
		while kill -0 "${pid}" 2> /dev/null; do
			# Current line count
			line_count="$(cat ${tmp_file} | wc -l)"

			if [[ "${tmp}" == "${line_count}" ]]; then
				showProgress "${tmp_file}" && printf "\r"
			else
				# Get last 2 lines of a temporary file
				line1="$(sed 's/\r/\n/g' "${tmp_file}" | tail -2 | head -1)"
				line2="$(sed 's/\r/\n/g' "${tmp_file}" | tail -1)"

				# Update text
				text1="$(echo "${line1}" | awk '{print "| [+] " $0}')"
				text2="$(echo "${line2}" | awk '{print "| [+] " $0}')"

				# Print newline at the end of a test
				printf "%s\n" "${text1}"
				printf "%s\n" "${text1}" >> "${result_file}"
				printf "%s\r" "${text2}"
			fi

			# Update line count
			tmp="${line_count}"

			# Re-check condition every .5 seconds
			sleep .5
		done

		# Last progress update
		showProgress "${tmp_file}" && printf "\n"
		printf "%s\n" "${delimiter}"

		# Write last progress update to file
		{
			showProgress "${tmp_file}" && printf "\n"
			printf "%s\n" "${delimiter}"
		} >> "${result_file}"

		# Disable the trap on a normal exit.
		trap - EXIT

		# Get results
		result_16=$(grep -w "on 16" ${tmp_file} | cut -d " " -f 10)
		if [[ "${result_16}" -gt "${fastest_16}" ]]; then
			fastest_16="${result_16}"
		fi
		result_64=$(grep -w "on 64" ${tmp_file} | cut -d " " -f 10)
		if [[ "${result_64}" -gt "${fastest_64}" ]]; then
			fastest_64="${result_64}"
		fi
		result_256=$(grep -w "on 256" ${tmp_file} | cut -d " " -f 10)
		if [[ "${result_256}" -gt "${fastest_256}" ]]; then
			fastest_256="${result_256}"
		fi
		result_1024=$(grep -w "on 1024" ${tmp_file} | cut -d " " -f 10)
		if [[ "${result_1024}" -gt "${fastest_1024}" ]]; then
			fastest_1024="${result_1024}"
		fi
		result_8192=$(grep -w "on 8192" ${tmp_file} | cut -d " " -f 10)
		if [[ "${result_8192}" -gt "${fastest_8192}" ]]; then
			fastest_8192="${result_8192}"
		fi
		result_16384=$(grep -w "on 16384" ${tmp_file} | cut -d " " -f 10)
		if [[ "${result_16384}" -gt "${fastest_16384}" ]]; then
			fastest_16384="${result_16384}"
		fi

		#Close FD3
		exec 3>&-

		# Remove temporary file
		rm "${tmp_file}"
	done

	# Print fastest score
	printf "%s\n" "${delimiter}"
	printf "| [+] Results for %s\n" "${algo}"
	printf "%s\n" "${delimiter}"
	printf "%s\n" "${delimiter}"
	printf "| [+] Fastest 16 bit score: %s\n" "${fastest_16}"
	printf "| [+] Fastest 64 bit score: %s\n" "${fastest_64}"
	printf "| [+] Fastest 256 bit score: %s\n" "${fastest_256}"
	printf "| [+] Fastest 1024 bit score: %s\n" "${fastest_1024}"
	printf "| [+] Fastest 8192 bit score: %s\n" "${fastest_8192}"
	printf "| [+] Fastest 16384 bit score: %s\n" "${fastest_16384}"
	printf "%s\n" "${delimiter}"

	# Write fastest score to result file
	{
		printf "%s\n" "${delimiter}"
		printf "| [+] Results for %s\n" "${algo}"
		printf "%s\n" "${delimiter}"
		printf "%s\n" "${delimiter}"
		printf "| [+] Fastest 16 bit score: %s\n" "${fastest_16}"
		printf "| [+] Fastest 64 bit score: %s\n" "${fastest_64}"
		printf "| [+] Fastest 256 bit score: %s\n" "${fastest_256}"
		printf "| [+] Fastest 1024 bit score: %s\n" "${fastest_1024}"
		printf "| [+] Fastest 8192 bit score: %s\n" "${fastest_8192}"
		printf "| [+] Fastest 16384 bit score: %s\n" "${fastest_16384}"
		printf "%s\n" "${delimiter}"
	} >> "${result_file}"
}

#  ------
# | MAIN |
#  ------

# Array to store missing dependencies
missing=()

# Check dependencies
checkDependencies

if [[ -z "${missing[*]}" ]]; then
	# Default directory
	default_directory="${HOME}/Documents/benchmarks/benchmark-openssl"

	# Results file
	result_file="results.txt"

	# Create default dir
	defaultDir

	# Backup results file
	backupResults

	# Number of iterations
	iterations=5

	# Print start date for a benchmark
	printf "%s\n" "${delimiter}"
	printf "| [+] Benchmark started at %s\n" "$(date +%Y-%m-%d_%H-%M-%S)"
	printf "%s\n" "${delimiter}"

	# Write a start date to file
	{
		printf "%s\n" ${delimiter};
		printf "| [+] Benchmark started at %s\n" "$(date +%Y-%m-%d_%H-%M-%S)";
		printf "%s\n" ${delimiter};
	} >> "${result_file}"

	# Print iteration count
	printf "%s\n" "${delimiter}";
	printf "| [+] Iterations: %s\n" "${iterations}";
	printf "%s\n" "${delimiter}";

	# Write iterations to file
	{
		printf "%s\n" "${delimiter}";
		printf "| [+] Iterations: %s\n" "${iterations}";
		printf "%s\n" "${delimiter}";
	} >> "${result_file}"

	# Print system info
	getInfo

	# Run benchmark
	benchmark

	# Print end date for a benchmark
	printf "%s\n" "${delimiter}"
	printf "| [+] Benchmark ended at %s\n" "$(date +%Y-%m-%d_%H-%M-%S)"
	printf "%s\n" "${delimiter}"

	# Write end date to a file
	{
		printf "%s\n" "${delimiter}";
		printf "| [+] Benchmark ended at %s\n" "$(date +%Y-%m-%d_%H-%M-%S)";
		printf "%s\n" "${delimiter}";
		printf "\r\n";
	} >> "${result_file}"
else
	printf "%s\n" "${delimiter}";
	printf "| [+] Missing dependencies: ${missing[*]} | OS: %s | Consult distribution docs on how to install required dependencies and try again\n" "$(grep -w ID /etc/os-release | cut -d "=" -f 2)"
	printf "%s\n" "${delimiter}";
fi
