#!/bin/bash

# Benchmark blender performance

#  -----------
# | Delimiter |
#  -----------
delimiter="------------------------------------------------------------------------------------------------------------"

#  ---------
# | Sources |
#  ---------
source assets/getInfo.sh
source assets/defaultDir.sh
source assets/backupResults.sh
source assets/showProgress.sh

checkDependencies() {
	# Check if dependencies are installed
	if ! which blender 2>/dev/null 1>&2; then missing+=("blender"); fi
	if ! which 7z 2>/dev/null 1>&2; then missing+=("7z"); fi
}

selectBenchmark() {
	# Select Blender a scene to render
	PS3="[+] Choose a scene: "
	scenes=("BMW" "Classroom")
	select scene in "${scenes[@]}"; do
		case "${scene}" in
			"BMW")
				printf "BMW"
				break
				;;
			"Classroom")
				printf "Classroom"
				break
				;;
		esac
	done
}

benchmark() {
	# Run a Blender benchmark
	local benchmark_dir="${1}"

	# Select a scene to render
	scene="$(selectBenchmark)"

	printf "%s\n" "${delimiter}"
	printf "| [+] Selected scene: %s\n" "${scene}"

	# Create a directory for selected scene
	scene_dir="${benchmark_dir}/data/${scene}"
	printf "| [+] Creating directory %s\n" "${scene_dir}"
	mkdir -p "${scene_dir}"

	# Benchmark the system
	cd "${scene_dir}"
	printf "| [+] Downloading %s to %s\n" "${scene}" "${scene_dir}"
	if [[ "${scene}" == "BMW" ]]; then
		# Download BMW benchmark
		wget -q https://download.blender.org/demo/test/BMW27.blend.zip && printf "| [+] Extracting %s\n" "${scene}" && 7z x BMW27.blend.zip 1>/dev/null
	elif [[ "${scene}" == "Classroom" ]]; then
		# Download Classroom benchmark
		wget -q https://download.blender.org/demo/test/classroom.zip && printf "| [+] Extracting %s\n" "${scene}" && 7z x classroom.zip 1>/dev/null
	fi

	printf "| [+] Scene %s downloaded and extracted\n" "${scene}"
	printf "%s\n" "${delimiter}"

	# Run benchmark for a specified number of iterations
	for (( i=0; i<"${iterations}"; i++)); do
		exec 3<> /tmp/blender_benchmark_data

		blender -b BMW27.blend -f 1 -o //render 1>&3 &

		pid="${!}"

		trap 'kill ${pid} 2> /dev/null' EXIT

		while kill -0 "${pid}"; do
			printf "%s\r" "$(tail -1 /tmp/blender_benchmark_data)"
		done
	done

    trap - EXIT

	# Print all output to file
	{
		printf "%s\n" "${delimiter}"
		printf "| [+] Selected scene: %s\n" "${scene}"
		printf "%s\n" "${delimiter}"
	} >> "${results_file}"
}

#  ------
# | Main |
#  ------

# Print start date for a benchmark
printf "%s\n" "${delimiter}"
printf "| [+] Benchmark started at %s\n" "$(date +%Y-%m-%d_%H-%M-%S)"
printf "%s\n" "${delimiter}"

# Write a start date to file
{
	printf "%s\n" ${delimiter};
	printf "| [+] Benchmark started at %s\n" "$(date +%Y-%m-%d_%H-%M-%S)";
	printf "%s\n" ${delimiter};
} >> "${results_file}"

# Iterations of benchmark to run
iterations=5

# Array to store missing dependencies
missing=()

# Check dependencies
checkDependencies

if ! [[ -z "${missing[@]}" ]]; then
	# If array of mising dependencies is not empty, print the error message and quit script
	printf "%s\n" "${delimiter}"
	printf "| [+] Package %s missing. Consult docs of your OS to install %s and run the benchmark again.\n" "${missing[@]}" "${missing[@]}"
	printf "%s\n" "${delimiter}"
	{
		printf "%s\n" "${delimiter}"
		printf "| [+] Package %s missing. Consult docs of your OS to install %s and run the benchmark again.\n" "${missing[@]}" "${missing[@]}"
		printf "%s\n" "${delimiter}"
	} >> "${results_file}"
else
	# If all dependencies are installed, run benchmark
	printf "%s\n" "${delimiter}"
	printf "| [+] Dependencies installed.\n"
	printf "%s\n" "${delimiter}"

	# Write iteration number to file
	{
		printf "%s\n" "${delimiter}"
		printf "| [+] Iterations: %s.\n" "${iterations}"
		printf "%s\n" "${delimiter}"
	} >> "${results_file}"

	# Set path to benchmark directories and files
	benchmark_dir="${HOME}/Documents/benchmarks/benchmark-blender"
	results_file="${benchmark_dir}/results-blender.txt"
	createDirectories "${benchmark_dir}" "${results_file}"

	# Get system info
	getInfo

	# Backup results file
	backupResults

	# Run benchmark
	benchmark "${benchmark_dir}"
fi

# Print end date for a benchmark
printf "%s\n" "${delimiter}"
printf "| [+] Benchmark ended at %s\n" "$(date +%Y-%m-%d_%H-%M-%S)"
printf "%s\n" "${delimiter}"

# Write end date to a file
{
	printf "%s\n" "${delimiter}";
	printf "| [+] Benchmark ended at %s\n" "$(date +%Y-%m-%d_%H-%M-%S)";
	printf "%s\n" "${delimiter}";
	printf "\r\n";
} >> "${results_file}"
